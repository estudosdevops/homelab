---
- name: Download k3s binary
  ansible.builtin.get_url:
    url: https://github.com/k3s-io/k3s/releases/download/{{ k3s_version }}/k3s
    checksum: sha256:https://github.com/k3s-io/k3s/releases/download/{{ k3s_version }}/sha256sum-amd64.txt
    dest: "{{ role_path }}/files/bin/k3s"
    mode: 0755
  delegate_to: localhost
  run_once: true
  register: k3s_binary
  tags:
    - all
    - k3s
    - never

- name: Copy k3s binary to nodes
  ansible.builtin.copy:
    src: bin/k3s
    dest: /usr/local/bin/k3s
    owner: root
    group: root
    mode: 0755
  tags:
    - all
    - k3s
    - never

- name: Ensure config directories exist
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: 0755
  loop:
    - /etc/rancher/k3s
    - /etc/rancher/node
    - "{{ k3s_data_dir }}/agent/pod-manifests"
  tags:
    - all
    - k3s
    - never

- name: Check if k3s token file exists on the first node
  run_once: true
  ansible.builtin.stat:
    path: "{{ k3s_token_file }}"
  register: k3s_token_file_stat
  tags:
    - all
    - k3s
    - never

- name: Generate k3s token file on the first node if not exist yet
  run_once: true
  when: not k3s_token_file_stat.stat.exists
  ansible.builtin.copy:
    content: "{{ lookup('community.general.random_string', length=32) }}"
    dest: "{{ k3s_token_file }}"
    mode: 0600
  tags:
    - all
    - k3s
    - never

- name: Get k3s token from the first node
  run_once: true
  ansible.builtin.slurp:
    src: "{{ k3s_token_file }}"
  register: k3s_token_base64
  tags:
    - all
    - k3s
    - never

- name: Ensure all nodes has the same token
  ansible.builtin.copy:
    content: "{{ k3s_token_base64.content | b64decode }}"
    dest: "{{ k3s_token_file }}"
    mode: 0600
  tags:
    - all
    - k3s
    - never

- name: Copy k3s config files
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: 0644
  loop:
    - src: config.yaml.j2
      dest: "{{ k3s_config_file }}"
    - src: k3s.service.j2
      dest: "{{ k3s_service_file }}"
  tags:
    - all
    - k3s
    - never

- name: Enable k3s service
  ansible.builtin.systemd:
    name: k3s
    enabled: true
    state: started
  register: k3s_service
  until: k3s_service is succeeded
  retries: 5
  tags:
    - all
    - k3s
    - never

- name: Get Kubernetes config file
  run_once: true
  ansible.builtin.slurp:
    src: "{{ k3s_kubeconfig_file }}"
  register: kubeconfig_base64
  tags:
    - all
    - k3s
    - never

- name: Write Kubernetes config file with the correct cluster address
  ansible.builtin.copy:
    content: "{{ kubeconfig_base64.content | b64decode | replace('127.0.0.1', control_plane_endpoint) }}"
    dest: "{{ playbook_dir }}/kubeconfig.yaml"
    mode: 0600
  delegate_to: localhost
  run_once: true
  tags:
    - all
    - k3s
    - never

- name: Create kubeconfig symbolic link in project root
  ansible.builtin.file:
    src: "{{ playbook_dir }}/kubeconfig.yaml"
    dest: "{{ playbook_dir }}/../../kubeconfig.yaml"
    state: link
    force: yes
  delegate_to: localhost
  run_once: true
  tags:
    - all
    - k3s
    - never

- name: Install required Python packages
  ansible.builtin.pip:
    name:
      - kubernetes
      - openshift
    state: present
  delegate_to: localhost
  run_once: true
  tags:
    - all
    - k3s
    - never

- name: Check if Kubernetes cluster is ready
  kubernetes.core.k8s_info:
    kind: Node
  register: k8s_nodes
  until: k8s_nodes is success and k8s_nodes.resources is defined and k8s_nodes.resources | length > 0
  retries: 30
  delay: 10
  delegate_to: localhost
  tags:
    - all
    - k3s
    - never

- name: Debug Kubernetes nodes information
  ansible.builtin.debug:
    var: k8s_nodes
    verbosity: 1
  delegate_to: localhost
  tags:
    - all
    - k3s
    - never

- name: Wait for core components to be ready
  kubernetes.core.k8s_info:
    kind: Pod
    namespace: kube-system
    label_selectors:
      - k8s-app in (kube-apiserver, kube-controller-manager, kube-scheduler, kube-proxy, kube-dns)
  register: core_pods
  until: core_pods.resources | selectattr('status.phase', 'equalto', 'Running') | list | length == core_pods.resources | length
  retries: 30
  delay: 10
  delegate_to: localhost
  tags:
    - all
    - k3s
    - never

- name: Remove o taints from nodes K3s
  kubernetes.core.k8s_taint:
    state: absent
    name: "{{ inventory_hostname }}"
    kubeconfig: "{{ playbook_dir }}/../../kubeconfig.yaml"
    taints:
      - key: node.kubernetes.io/not-ready
        effect: "NoSchedule"
  delegate_to: localhost
  tags:
    - all
    - k3s
    - never

- name: Create custom ConfigMap for CoreDNS
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: coredns-custom
        namespace: kube-system
      data:
        custom.server: |
          {{ domain }}:53 {
            errors
            cache 30
            forward . {{ pihole_ip }} {
              policy sequential
            }
          }
  notify: restart coredns
  delegate_to: localhost
  tags:
    - all
    - k3s
    - never
