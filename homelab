#!/usr/bin/env bash
# Description: Gerencia playbooks ansible

# shellcheck disable=SC1091
source "scripts/lib/common.sh"

# Constants
readonly ANSIBLE_DIR="ansible"
readonly PLAYBOOKS_DIR="${ANSIBLE_DIR}/playbooks"
readonly INVENTORIES_DIR="${ANSIBLE_DIR}/inventories"
readonly DEFAULT_INVENTORY="k3s"

# Logging functions
log_playbook_info() {
    local playbook_name=$1
    local mode=$2
    log_info "Executando playbook em modo ${mode}: ${playbook_name}"
}

log_error_and_exit() {
    local message=$1
    local exit_code=${2:-1}
    log_error "$message"
    exit "$exit_code"
}

# Validation functions
validate_required_args() {
    local playbook_name=$1
    local action=$2

    if [ -z "$playbook_name" ]; then
        log_error_and_exit "Nome do playbook é obrigatório"
    fi

    if [ "$action" != "check" ] && [ "$action" != "create" ]; then
        log_error_and_exit "Ação inválida. Use 'check' ou 'create'"
    fi
}

validate_playbook() {
    local playbook_name=$1
    local playbook="${PLAYBOOKS_DIR}/${playbook_name}.yml"

    if [ ! -f "$playbook" ]; then
        log_error "Playbook não encontrado em ${playbook}"
        log_info "Playbooks disponíveis:"
        list_playbooks
        exit 1
    fi
}

validate_inventory() {
    local inventory=$1
    local inventory_file="${INVENTORIES_DIR}/${inventory}.yml"

    if [ ! -f "$inventory_file" ]; then
        log_error_and_exit "Inventário não encontrado em ${inventory_file}"
    fi
}

# Core functions
check_ansible_deps() {
    check_dependency "ansible"
}

list_playbooks() {
    log_info "Procurando playbooks em ${PLAYBOOKS_DIR}..."

    if [ ! -d "$PLAYBOOKS_DIR" ]; then
        log_error_and_exit "Diretório de playbooks não encontrado em ${PLAYBOOKS_DIR}"
    fi

    local total_playbooks
    total_playbooks=$(find "$PLAYBOOKS_DIR" -maxdepth 1 -name "*.yml" | wc -l)

    if [ "$total_playbooks" -eq 0 ]; then
        log_warn "Nenhum playbook encontrado em ${PLAYBOOKS_DIR}"
        exit 1
    fi

    log_info "Encontrado(s) $total_playbooks playbook(s):"
    echo "----------------------------------------"

    for playbook in "$PLAYBOOKS_DIR"/*.yml; do
        if [ -f "$playbook" ]; then
            local playbook_name
            local description
            playbook_name=$(basename "$playbook" .yml)
            description=$(grep -m 1 "^# Description:" "$playbook" | cut -d':' -f2- | sed 's/^[[:space:]]*//')

            if [ -n "$description" ]; then
                echo -e "${GREEN}${playbook_name}${NC}: ${description}"
            else
                echo -e "${GREEN}${playbook_name}${NC}"
            fi
        fi
    done
    echo "----------------------------------------"
}

run_ansible() {
    local playbook_name=$1
    local mode=$2
    local inventory=$3
    shift 3
    local ansible_opts=("$@")
    local playbook="playbooks/${playbook_name}.yml"

    # Validate inputs
    validate_playbook "$playbook_name"
    validate_inventory "$inventory"

    # Change to ansible directory
    cd "$ANSIBLE_DIR" || exit 1

    # Build ansible command
    local ansible_cmd="ansible-playbook -i \"inventories/${inventory}.yml\" \"$playbook\""

    # Add ansible options if provided
    if [ ${#ansible_opts[@]} -gt 0 ]; then
        ansible_cmd="${ansible_cmd} ${ansible_opts[*]}"
    fi

    # Execute command based on mode
    log_playbook_info "$playbook_name" "$mode"
    case "$mode" in
        "check")
            eval "${ansible_cmd} --check"
            ;;
        "create")
            eval "${ansible_cmd}"
            ;;
        *)
            log_error_and_exit "Modo inválido. Use 'check' ou 'create'"
            ;;
    esac

    # Return to original directory
    cd - > /dev/null || exit 1
}

process_ansible_opts() {
    local ansible_opts=()
    local inventory=$DEFAULT_INVENTORY

    while [ $# -gt 0 ]; do
        if [[ $1 == -* ]]; then
            ansible_opts+=("$1")
            # Handle options that require values
            if [[ $1 == --* && $1 != --check && $1 != --diff && $1 != --force-handlers && $1 != --flush-cache && $1 != --list-hosts && $1 != --list-tags && $1 != --list-tasks && $1 != --syntax-check ]]; then
                if [ -n "$2" ]; then
                    ansible_opts+=("$2")
                    shift
                fi
            fi
        else
            inventory=$1
        fi
        shift
    done

    echo "$inventory"
    printf '%s\n' "${ansible_opts[@]}"
}

show_help() {
    cat << EOF
Uso: $0 [OPÇÕES] <ação> <nome_playbook> [ansible_opções]

Opções:
  -h, --help     Mostra esta mensagem de ajuda
  list          Lista todos os playbooks disponíveis

Argumentos:
  ação          Ação a ser executada: check ou create
  nome_playbook  Nome do playbook a ser executado (sem extensão .yml)
  ansible_opções (Opcional) Qualquer opção válida do ansible-playbook

Exemplos:
  $0 list                    # Lista todos os playbooks disponíveis
  $0 check k3s              # Executa playbook k3s em modo check
  $0 create k3s             # Executa playbook k3s em modo create
  $0 create k3s --extra-vars 'var1=value1 var2=value2'    # Executa playbook com variáveis extras
  $0 create k3s -k -K       # Executa playbook solicitando senhas SSH e sudo
  $0 create k3s --tags 'tag1,tag2'    # Executa playbook apenas com tags específicas

Nota: Todos os playbooks devem estar em ${PLAYBOOKS_DIR}/
      Todos os arquivos de inventário devem estar em ${INVENTORIES_DIR}/
EOF
}

main() {
    check_ansible_deps

    # Handle help flag
    if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
        show_help
        exit 0
    fi

    if [ $# -lt 1 ]; then
        show_help
        exit 1
    fi

    local action=$1
    local playbook_name=$2

    # Process remaining arguments
    shift 2
    local processed_args
    processed_args=($(process_ansible_opts "$@"))
    local inventory=${processed_args[0]}
    local ansible_opts=("${processed_args[@]:1}")

    # Handle list action
    if [ "$action" = "list" ]; then
        list_playbooks
        exit 0
    fi

    # Validate required arguments
    validate_required_args "$playbook_name" "$action"

    # Run ansible playbook
    run_ansible "$playbook_name" "$action" "$inventory" "${ansible_opts[@]}"
}

# Execute main function with all arguments
main "$@"
